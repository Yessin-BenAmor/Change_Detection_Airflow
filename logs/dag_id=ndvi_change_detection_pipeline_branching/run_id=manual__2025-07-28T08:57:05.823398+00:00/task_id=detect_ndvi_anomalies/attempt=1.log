{"timestamp":"2025-07-28T08:57:07.043940","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-28T08:57:07.044363","level":"info","event":"Filling up the DagBag from /home/user/airflow/dags/my_first_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-28T08:57:07.536474Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:07.536569Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:07.536683Z","level":"info","event":"Current task name:detect_ndvi_anomalies","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:07.536729Z","level":"info","event":"Dag name:ndvi_change_detection_pipeline_branching","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:10.978603","level":"warning","event":"FigureCanvasAgg is non-interactive, and thus cannot be shown","category":"UserWarning","filename":"/home/user/airflow/ndvi_utils.py","lineno":238,"logger":"py.warnings"}
{"timestamp":"2025-07-28T08:57:10.979920","level":"info","event":"Done. Returned value was: (array([[1, 1, 1, ..., 1, 1, 1],\n       [1, 1, 1, ..., 1, 1, 1],\n       [1, 1, 1, ..., 1, 1, 1],\n       ...,\n       [1, 1, 1, ..., 1, 1, 1],\n       [1, 1, 1, ..., 1, 1, 1],\n       [1, 1, 1, ..., 1, 1, 1]], shape=(32, 64)), array([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], shape=(32, 64), dtype=float32), array([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]], shape=(32, 64), dtype=float32), array([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       ...,\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]], shape=(32, 64)), array([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       ...,\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]], shape=(32, 64)), array([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       ...,\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]], shape=(32, 64)))","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-28T08:57:10.980132","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198503f-f638-7695-b93c-664a95f4f98f'), task_id='detect_ndvi_anomalies', dag_id='ndvi_change_detection_pipeline_branching', run_id='manual__2025-07-28T08:57:05.823398+00:00', try_number=1, map_index=-1, hostname='DESKTOP-H7QUGA8.', context_carrier=None, task=<Task(PythonOperator): detect_ndvi_anomalies>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 7, 28, 8, 57, 7, 21145, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/ndvi_change_detection_pipeline_branching/runs/manual__2025-07-28T08%3A57%3A05.823398%2B00%3A00/tasks/detect_ndvi_anomalies?try_number=1')","logger":"task"}
{"timestamp":"2025-07-28T08:57:10.980342","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"TypeError","exc_value":"cannot serialize object of type <class 'numpy.ndarray'>","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":888,"name":"run"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1227,"name":"_push_xcom_if_needed"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":533,"name":"_xcom_push"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/sdk/bases/xcom.py","lineno":71,"name":"set"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/sdk/bases/xcom.py","lineno":329,"name":"serialize_value"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/serialization/serde.py","lineno":152,"name":"serialize"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/serialization/serde.py","lineno":129,"name":"serialize"},{"filename":"/home/user/airflow_venv_clean/lib/python3.12/site-packages/airflow/serialization/serde.py","lineno":185,"name":"serialize"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-28T08:57:10.999035Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:10.999215Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:10.999274Z","level":"info","event":"Task:<Task(PythonOperator): detect_ndvi_anomalies>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-28T08:57:10.999317Z","level":"info","event":"Failure caused by cannot serialize object of type <class 'numpy.ndarray'>","chan":"stdout","logger":"task"}
